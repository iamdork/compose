{
  "name": "dork-compose",
  "tagline": "Command line replacement for docker-compose, adding dork magics.",
  "body": "# Dork Compose\r\n![Build Status](https://travis-ci.org/iamdork/compose.svg?branch=master)\r\n\r\n## What is this?\r\n`dork-compose` is a drop in replacement for the [docker-compose] command line tool, adding some convenience features for running multiple compose projects on the same host.\r\n\r\n- Volume snapshots with automatic versioning.\r\n- Separation of Docker setup (`Dockerfile` and `docker-compose.yml`) from application source code.\r\n- Automatic launch of and connection to auxiliary services, like [nginx](https://github.com/jwilder/nginx-proxy)- or [XDebug](https://xdebug.org/docs-dbgp.php#just-in-time-debugging-and-debugger-proxies) proxies.\r\n\r\n### Example use cases:\r\n- Your local development workstation, hosting multiple different projects built on the same framework, and therefore requiring similar infrastructure and setup steps.\r\n- A staging server running multiple versions of the same project, doing fast upgrade testing by using volume snapshots.\r\n- A continuous integration server, running automatic tests on pull requests.\r\n\r\n\r\n## Installation\r\n`dork-compose` uses the same installation procedures as [docker-compose].\r\nEither using pip:\r\n```\r\n$ pip install dork-compose\r\n```\r\n\r\nOr by installing it as a container itself.\r\n\r\n```bash\r\n$ curl -L https://raw.githubusercontent.com/iamdork/compose/master/run.sh > /usr/local/bin/dork-compose\r\n$ chmod +x /usr/local/bin/dork-compose\r\n```\r\n\r\n## Plugins\r\n\r\nEverything `dork-compose` does additionally to `docker-compose` is implemented using plugins. The `DORK_PLUGINS` environment variable controls which plugins are loaded and in which order they are executed. Plugins are able to alter environment variables, modify the configuration from `docker-compose.yml` and act on certain events throughout the `docker-compose` command processes.\r\n\r\nBy default the `DORK_PLUGINS` variable looks like this:\r\n\r\n```\r\nlib:multi:git:filesystem:proxy\r\n```\r\n\r\nThat's the default workstation setup. Plugins are executed from left to right. If two plugins to the same, the right one wins.\r\nLet's run through this example:\r\n\r\n- **lib:** If there is a `DORK_LIBRARY` environment variable that contains a valid directory, `dork-compose` will assume the `docker-compose.yml` is there. The current application sources will be added to the `Dockerfile` build context automatically.\r\n\r\n- **multi:** Multiple different projects. The project name will be the name of the containing directory. It is used to prefix snapshots and build the domain.\r\n\r\n- **git:** Git repository information is used to handle automatic *save* and *load* of snapshots. Handy for frequent branch switchers.\r\n\r\n- **filesystem:** Implements snapshots as plain filesystem copy operations. Not particularly fast or disk space economic, but works out of the box everywhere.\r\n\r\n- **proxy:** Spins up a proxy service that serves your project at http://project.127.0.0.1.xip.io.\r\n\r\nThere are no configuration files. Plugins can be configured using environment variables, which you define in your shell environment for by using the **env** plugin. For a complete list of plugins and their options please refer to [Appendix: Plugins][]. For an in-action example of these plugins, please refer to the [drupal-simple](https://github.com/iamdork/examples/tree/master/drupal-simple) in the [examples repository](https://github.com/iamdork/examples).\r\n\r\n\r\n### Custom plugins\r\n\r\nIt's possible to create and load custom plugins. Simply create a Python file with one class called *Plugin* that extends `dork_compose.plugin.Plugin` and attach it to the `DORK_PLUGINS` variable:\r\n\r\n```\r\nenv:lib:multi:git:filesystem:proxy:my_plugin=~/path/to/myplugin.py\r\n```\r\n\r\nFor example plugins have a look at the `plugins` directory inside the `dork-compose` source.\r\n\r\n## Snapshots\r\n\r\n`dork-compose` is able to create snapshots of all data volumes used in a compose project. This is done by using the additional `dork-compose snapshot` command.\r\nFor an example of how to work with snapshots, please refer to the *drupal-simple* example in the [examples repository](https://github.com/iamdork/examples).\r\n\r\n### Projects & Instances\r\n\r\nSnapshots are organized in  *projects* and *instances*. `dork-compose` assumes that instances of the same project are compatible. Aside from building the proxy domain, the major purpose is to restrict snapshots to be used by instances of the same project only.\r\n\r\nThe current *project* and *instance* is determined by plugins (like *multi* in the default setup) or by the `DORK_PROJECT` and `DORK_INSTANCE` environment variables.\r\n\r\n### Automatic snapshots\r\n\r\nIf the snapshot identifier is omitted from the `snapshot save` and `snapshot load` command, `dork-compose` will rely on plugins to provide one. The **git** plugin in the default setup for example will store snapshots by the current HEAD hash and will try to load the closest available ancestor to the current checkout. This avoids breaking your development database by switching between feature branches.\r\n\r\n## Appendix: Plugins\r\n\r\n*TODO: explain all builtin plugins.*\r\n[docker-compose]: https://docs.docker.com/compose/\r\n[env]: https://docs.docker.com/compose/compose-file/#env-file\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}